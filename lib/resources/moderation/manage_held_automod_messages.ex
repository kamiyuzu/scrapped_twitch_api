defmodule TwitchApi.Moderation.ManageHeldAutoModMessages do
  @moduledoc """
  â›” This module is autogenerated please do not modify manually.

  ## Example request from twitch api docs:
  ### descriptions:
  Allow a message being held by AutoMod.
  Deny a message being held by AutoMod.

  ### requests:
  curl -X POST 'https://api.twitch.tv/helix/moderation/automod/message'  
   -H'Authorization: Bearer cfabdegwdoklmawdzdo98xt2fo512y'  
   -H'Client-Id: uo6dggojyb8d6soh92zknwmi5ej1q2'  
   -d'{
    "user_id": "9327994",
    "msg_id": "836013710",
    "action": "DENY"
   }'
  curl -X POST 'https://api.twitch.tv/helix/moderation/automod/message'  
   -H'Authorization: Bearer cfabdegwdoklmawdzdo98xt2fo512y'  
   -H'Client-Id: uo6dggojyb8d6soh92zknwmi5ej1q2'  
   -d'{
    "user_id": "9327994",
    "msg_id": "836013710",
    "action": "ALLOW"
   }'


  ## Example response from twitch api docs:
  ### descriptions:
  Shows that a message was successfully allowed.
  Shows that a message was successfully denied.

  ### responses:
  204NoContent
  204NoContent


  """

  alias TwitchApi.MyFinch

  @doc """
  ### Description:
  Allow or deny a message that was held for review by AutoMod.

  ### Required authentication:

  """

  # The action to take for the message. Must be \ALLOW\ or \DENY\.
  @spec call(
          %{
            required(:action) => String.t(),
            # ID of the message to be allowed or denied. These message IDs are retrieved from PubSub as mentioned above. Only one message ID can be provided.
            required(:msg_id) => String.t(),
            # The moderator who is approving or rejecting the held message. Must match the user_id in the user OAuth token.
            required(:user_id) => String.t()
          }
          | nil
        ) :: {:ok, Finch.Response.t()} | {:error, Exception.t()}
  def call(body_params) do
    MyFinch.request(
      "POST",
      "https://api.twitch.tv/helix/moderation/automod/message",
      TwitchApi.ApiJson.Template.Method.Headers.config_headers(),
      body_params
    )
  end
end
